#include "get_next_line.h"
#include <stdio.h>
#include <string.h>
#include <fcntl.h>


char	*read_file(char *buffer, int fd);
char	*extract_line(char	*buffer);
char	*extract_remaining(char *buffer);
char	*update_buffer(char **buffer, int fd);

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*s;
	size_t	s1_len;
	size_t	s2_len;

	if (!s1 && !s2)
		return (NULL);
	s1_len = 0;
	s2_len = 0;
	if (s1)
		s1_len = ft_strlen(s1);
	if (s2)
		s2_len = ft_strlen(s2);
	s = malloc(s1_len + s2_len + 1);
	if (!s)
		return (NULL);
	if (s1)
		ft_memcpy(s, s1, s1_len);
	if (s2)
		ft_memcpy(s + s1_len, s2, s2_len);
	s[s1_len + s2_len] = '\0';
	return (s);
}

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	size_t			count;
	unsigned char	*dest_p;
	unsigned char	*src_p;

	if (!dest && !src)
		return (NULL);
	dest_p = (unsigned char *)dest;
	src_p = (unsigned char *)src;
	count = 0;
	while (count < n)
	{
		dest_p[count] = src_p[count];
		count++;
	}
	return (dest);
}

size_t	ft_strlen(const char *s)
{
	size_t	count;

	if (!s)
		return (0);
	count = 0;
	while (*s)
	{
		count++;
		s++;
	}
	return (count);
}

char	*ft_strchr(const char *s, int c)
{
	if (!s)
		return (NULL);
	while (*s)
	{
		if ((unsigned char)*s == (unsigned char)c)
			return ((char *)s);
		s++;
	}
	if (c == '\0')
		return ((char *)s);
	return (NULL);
}

char	*ft_strdup(const char *s)
{
	size_t	len;
	char	*dup;
	size_t	i;

	i = 0;
	if (!s)
		return (NULL);
	len = ft_strlen(s);
	dup = malloc(len + 1);
	if (!dup)
		return (NULL);
	while (i < len)
	{
		dup[i] = s[i];
		i++;
	}
	dup[i] = '\0';
	return (dup);
}

char	*get_next_line(int fd)
{
	static char	*main_buffer;
	char		*line;
	char		*temp;

	if (fd < 0 || BUFFER_SIZE <= 0)
		return (NULL);
	if (!main_buffer)
		main_buffer = ft_strdup("");
	if (!main_buffer)
		return (NULL);
	update_buffer(&main_buffer, fd);
	if (main_buffer == NULL)
		return (NULL);
	if (*main_buffer == '\0')
		return (free(main_buffer), NULL);
	line = extract_line(main_buffer);
	if (!line)
		return (free(main_buffer), main_buffer = NULL, NULL);
	temp = extract_remaining(main_buffer);
	if (!temp)
		return (free(main_buffer), main_buffer = NULL, line);
	free(main_buffer);
	main_buffer = temp;
	return (line);
}

char	*update_buffer(char **buffer, int fd)
{
	char	*temp;

	if (!ft_strchr(*buffer, '\n'))
	{
		temp = read_file(*buffer, fd);
		if (!temp)
			return (NULL);
		*buffer = temp;
	}
	return (*buffer);
}

char	*read_file(char *buffer, int fd)
{
	ssize_t	bytes_read;
	char	*read_buffer;
	char	*tem;

	read_buffer = malloc((BUFFER_SIZE + 1) * sizeof(char));
	if (!read_buffer)
		return (NULL);
	while (1)
	{
		bytes_read = read(fd, read_buffer, BUFFER_SIZE);
		if (bytes_read == -1)
			return (free(read_buffer), NULL);
		read_buffer[bytes_read] = '\0';
		tem = ft_strjoin(buffer, read_buffer);
		if (!tem)
			return (free(read_buffer), free(tem), NULL);
		free(buffer);
		buffer = tem;
		if (ft_strchr(buffer, '\n'))
			break ;
		if (bytes_read == 0)
			break ;
	}
	free(read_buffer);
	return (buffer);
}

char	*extract_line(char	*buffer)
{
	char	*line;
	int		i;
	int		j;

	i = 0;
	j = 0;
	while (buffer[i] != '\n' && buffer[i] != '\0')
		i++;
	line = malloc(i + 2);
	if (!line)
		return (NULL);
	while (j <= i)
	{
		line[j] = buffer[j];
		j++;
	}
	line[j] = '\0';
	return (line);
}

char	*extract_remaining(char *buffer)
{
	char	*remaining;
	char	*newline_position;

	newline_position = ft_strchr(buffer, '\n');
	if (!newline_position)
		return (NULL);
	remaining = ft_strdup(newline_position + 1);
	return (remaining);
}

int	main(void)
{
	char	*nextline;
	int		fd;
	int		count;

	fd = open("text1.txt", O_RDONLY);
	if (fd == -1)
	{
		printf("Error! Could not open file\n");
		exit (-1);
	}
	count = 0;
	while (1)
	{
		nextline = get_next_line(fd);
		if (!nextline)
		{
			printf("EOF! Could not get next line\n");
			break ;
		}
		count++;
		printf("return line [%d]:%s\n", count, nextline);
		free(nextline);
	}
	close(fd);
}